Data Structures used:
	-HashTableChained.java (in dict package)
		*Extends Dictionary.java
		*Hash Table that uses generic Entries (defined by Entry.java)
		*Modified to support generic types
		*Resizes whenever the load factor is greater or equal than 1
	
	-Dlist.java (in list package)
		*Extends List.java
		*Doubly-Linked List
		*Modified to support generic types
	
	-DListNode.java (in list package)
		*Extends ListNode.java
		*Node in a Doubly-Linked List
		*Modified to support generic types

	-Vertex.java (in graph package)
		*Representation of a vertex to be used with WUGraph
		*Contains the following fields:
			*protected DList<Edge> adjacencyList 
				//List of edges containing the vertex
			*protected Object item 
				//Item that the vertex contains
			*protected ListNode<Vertex> node 
				//the ListNode that the vertex is part of
				//Used as a reference to a WUGraph's list of vertices
				
	-Edge.java (in graph package)
		*Representation of an edge to be used with WUGraph
		*Contains the following fields:
			*protected VertexPair vertexpair
				//Pair of vertices that the edge connects
			*protected int weight
				//The weight of the edge
			*protected ListNode<Edge> node1, node2
				//References to the nodes that each vertex is a part of

	-KEdge.java (in default package)
		*Representation of an edge being used in Kruskal's Algorithm
		*Contains the following fields:
			*protected VertexPair vertexpair
				//Pair of vertices that the edge connects
			*protected int weight
				//The weight of the edge

WUGraph
-------
Fields:
	private int vertexCount; 
		//Number of vertices in the graph
	private int edgeCount;
		//Number of edges in the graph
	private HashTableChained<Object, Vertex> vertexTable; 
		//Hash Table of vertices in the graph. Keys are objects that are each Vertex's item,
		//Values are the representation of the vertices themselves.
	private HashTableChained<VertexPair, Edge> edgeTable; 
		//Hash Table of edges in the graph. Keys are the vertexpairs that are a part of an
		//edge, Values are the representation of the edge themselves.
	private DList<Vertex> vertexList; //List of vertices in the graph
	
Discussion of important methods:
	public void removeVertex(Object vertex)
		--Intended to run on O(d) time.
			*We achieved this by allowing each vertex to be accessed in O(1) time through a hash table, namely
			HashTableChained vertexTable. Then each vertex has access to the list of edges that are connected to
			it, which is of size d. Each edge must be removed from the graph by removeEdge, which takes O(1) time
			because that only involves removing a reference to the edge from edgeTable (a hash table).
			Afterwards, the vertex itself must be removed from vertexList. But since each vertex contains a reference
			to the ListNode they contain, we can call remove() from the vertex's node without having to search for it
			directly in vertexList. So instead of taking O(|V|) time, it would instead take O(1) time to remove
			the vertex from the list of vertices stored in WUGraph. Finally, vertexCount must be decremented, which
			takes O(1) time. So removeVertex(Object vertex) at worst case will take O(d) time.
			